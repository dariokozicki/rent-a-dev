import { SignInButton, SignedIn, SignedOut, useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { toast } from "react-hot-toast";
import { PageLayout } from "~/components/layout";
import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { PostView } from "~/components/postview";
import { api } from "~/utils/api";

const CreatePostWizard = () => {
  const { user } = useUser();
  const ctx = api.useContext();
  const { mutate: createPost, isLoading: isPosting } =
    api.posts.create.useMutation({
      onSuccess: async () => {
        await ctx.posts.invalidate();
        setContent("");
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors?.content?.[0];
        if (errorMessage) {
          toast.error(errorMessage);
        } else {
          toast.error("Failed to post! Please try again later.");
        }
      },
    });
  const [content, setContent] = useState("");
  if (!user) return null;

  return (
    <div className="flex w-full gap-4">
      <Image
        src={user.profileImageUrl}
        alt="Profile Image"
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
      />
      <input
        placeholder="Type some emojis!"
        className="grow bg-transparent outline-none disabled:text-gray-400"
        value={content}
        onChange={(e) => setContent(e.target.value)}
        disabled={isPosting}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            createPost({ content });
          }
        }}
      />
      <button
        className="rounded-md bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-indigo-500 via-purple-500 to-pink-500 px-6 transition-all hover:brightness-110"
        disabled={isPosting || !content.length}
        onClick={() => createPost({ content })}
      >
        {isPosting ? <LoadingSpinner /> : "Post"}
      </button>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery(
    undefined,
    { refetchOnWindowFocus: false }
  );

  if (postsLoading) return <LoadingPage />;

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  //fetch early
  api.posts.getAll.useQuery(undefined, { refetchOnWindowFocus: false });

  return (
    <>
      <Head>
        <title>Rent A Dev</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        {" "}
        <div className="flex border-b border-slate-400 p-4">
          <SignedIn>
            {/* Mount the UserButton component */}
            {/* <UserButton /> */}
            <CreatePostWizard />
          </SignedIn>
          <SignedOut>
            {/* Signed out users get sign in button */}
            <SignInButton />
          </SignedOut>
        </div>
        <Feed />
      </PageLayout>
    </>
  );
};

export default Home;
